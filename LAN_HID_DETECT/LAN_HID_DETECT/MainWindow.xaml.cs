using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Threading;
using HidSharp;
using System.Net;
using System.Net.Sockets;
using System.IO;


namespace LAN_HID_DETECT
{
    /// <summary>
    /// Логика взаимодействия для MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        byte[] mass = new byte[15];
        private DeviceList mDevList;
        private IEnumerable<HidDevice> mHidList;
        private HidDevice mHidDevice;
        private HidStream mHidStream;
        int arr = 0;
        //========================================================
        Socket socket;
        static int port = 5025; // порт сервера
        static string address; // адрес сервер
        static bool flag_on_off = false;
        //========================================================
        bool flag_temp = false;
        
        //StreamWriter f;
        string value_frq;
        string value_amp;
        string value_u;

        int iteration = 1;
        //=====================================================
        /*int[] value_freq_amp_byte10 = { 308, 307, 307, 309, 310, 312, 313, 317, 319, 322, 326, 330, 334, 338, 341, 344, 349, 354, 358, 362, 366, 371, 375, 378, 382, 385, 389, 392, 396, 400, 403, 407, 411, 414, 417, 413, 401, 403, 413, 418, 424, 428, 433, 436, 438, 441, 444, 444, 447, 447, 449, 449, 450, 451, 450, 449, 449, 448, 448, 447, 447, 447, 447, 448, 449, 451, 454, 456, 458, 460, 464, 466, 471, 475, 481, 487, 492, 499, 505, 512, 517, 521, 523, 522, 524, 526, 530, 535, 541, 547, 553, 560, 566, 574, 581, 588, 595, 603, 610 };
        int[] value_freq_amp_byte0 = {530, 532, 534, 535, 536, 540, 541, 543, 547, 549, 553, 555, 560, 561, 563, 565, 565, 572, 575, 578, 582, 585, 589, 593, 597, 600, 604, 609, 612, 618, 620, 627, 630, 637, 641, 643, 644, 643, 653, 656, 662, 667, 672, 677, 682, 685, 691, 690, 697, 697, 702, 705, 708, 713, 715, 718, 720, 723, 722, 723, 722, 723, 723, 725, 728, 731, 736, 740, 746, 749, 753, 757, 763, 769, 778, 785, 794, 803, 813, 822, 830, 837, 841, 845, 848, 852, 856, 862, 868, 877, 882, 893, 900, 911, 921, 931, 941, 952, 963 };
        int[] value_freq_amp_byte_10 = {834, 836, 838, 839, 841, 842, 845, 848, 848, 853, 853, 858, 860, 862, 864, 864, 870, 873, 877, 881, 884, 889, 892, 897, 901, 905, 909, 912, 920, 922, 929, 932, 938, 943, 945, 944, 944, 952, 955, 963, 966, 971, 975, 979, 982, 988, 989, 994, 995, 1000, 1002,1006, 1010, 1014, 1018,1020, 1024, 1024, 1025,1026, 1028, 1030, 1033,1038, 1043, 1048, 1054,1062, 1066, 1072, 1078,1087, 1094, 1104, 1113,1125, 1136, 1148, 1160, 1169, 1179, 1185, 1192,1198, 1205, 1212, 1222,1230, 1242, 1252, 1265,1275, 1289, 1302, 1316, 1332, 1346, 1360, 1374 };
        int[] value_freq_amp_byte_20 = {1143, 1143, 1144, 1145, 1146, 1148, 1149, 1151, 1154, 1155, 1159, 1160, 1164, 1165, 1167, 1169, 1169, 1176, 1178, 1181, 1184, 1188, 1192, 1194, 1199, 1202, 1207, 1210, 1213, 1219, 1220, 1227, 1229, 1234, 1239, 1240, 1239, 1238, 1245, 1248, 1254, 1258, 1262, 1266, 1270, 1273, 1278, 1279, 1285, 1285, 1291, 1294, 1299, 1303, 1308, 1314, 1316, 1321, 1323, 1326, 1328, 1332, 1336, 1340, 1346, 1353, 1362, 1370, 1379, 1386, 1395, 1403, 1414, 1424, 1439, 1451, 1466, 1480, 1495, 1510, 1523, 1536, 1546, 1554, 1566, 1575, 1587, 1599, 1611, 1627, 1640, 1657, 1672, 1690, 1707, 1725, 1744, 1761, 1780 };
        int[] value_freq_amp_byte_30 = {1453, 1454, 1454, 1455, 1456, 1456, 1457, 1459, 1461, 1461, 1464, 1464, 1468, 1469, 1469, 1470, 1469, 1475, 1478, 1481, 1482, 1485, 1488, 1490, 1494, 1496, 1499, 1503, 1505, 1511, 1512, 1519, 1521, 1525, 1530, 1531, 1530, 1528, 1537, 1538, 1544, 1548, 1553, 1556, 1562, 1563, 1568, 1570, 1576, 1579, 1585, 1589, 1595, 1602, 1606, 1614, 1618, 1626, 1629, 1634, 1639, 1644, 1650, 1657, 1666, 1675, 1686, 1696, 1708, 1718, 1729, 1740, 1753, 1766, 1782, 1796, 1814, 1830, 1847, 1864, 1879, 1895, 1907, 1919, 1932, 1946, 1960, 1976, 1991, 2009, 2026, 2046, 2063, 2083, 2102, 2120, 2139, 2156, 2172 };
        int[] value_freq_amp_byte_40 = {1764, 1764, 1764, 1764, 1764, 1765, 1766, 1767, 1770, 1768, 1771, 1772, 1774, 1775, 1777, 1777, 1777, 1783, 1785, 1787, 1790, 1792, 1796, 1798, 1803, 1804, 1807, 1810, 1812, 1818, 1819, 1825, 1827, 1831, 1836, 1836, 1835, 1834, 1839, 1841, 1847, 1850, 1854, 1856, 1862, 1863, 1868, 1869, 1876, 1877, 1884, 1888, 1895, 1903, 1909, 1917, 1923, 1931, 1937, 1943, 1948, 1955, 1961, 1971, 1980, 1990, 2002, 2014, 2028, 2038, 2051, 2064, 2079, 2094, 2111, 2126, 2144, 2161, 2178, 2194, 2207, 2219, 2230, 2239, 2249, 2258, 2266, 2275, 2281, 2290, 2297, 2304, 2310, 2316, 2320, 2325, 2329, 2333, 2337};
        int[] value_freq_amp_byte_50 = { 2067, 2067, 2069, 2067, 2068, 2068, 2069, 2069, 2071, 2070, 2072, 2072, 2074, 2074, 2075, 2075, 2075, 2080, 2080, 2082, 2085, 2088, 2091, 2094, 2100, 2103, 2108, 2112, 2115, 2120, 2119, 2124, 2125, 2128, 2131, 2130, 2128, 2125, 2130, 2131, 2137, 2139, 2142, 2144, 2147, 2124, 2138, 2153, 2160, 2156, 2169, 2162, 2180, 2186, 2193, 2202, 2208, 2215, 2220, 2226, 2231, 2237, 2243, 2250, 2257, 2264, 2271, 2278, 2278, 2251, 2296, 2302, 2303, 2314, 2320, 2322, 2307, 2332, 2336, 2329, 2341, 2344, 2338, 2347, 2348, 2348, 2350, 2350, 2354, 2355, 2355, 2356, 2355, 2356, 2358, 2358, 2359, 2358, 2359};
        int[] value_freq_amp_byte_60 = {2297, 2297, 2298, 2297, 2297, 2297, 2298, 2297, 2298, 2298, 2299, 2300, 2300, 2299, 2300, 2300, 2299, 2301, 2302, 2303, 2303, 2304, 2306, 2306, 2307, 2307, 2309, 2310, 2311, 2313, 2312, 2314, 2315, 2316, 2317, 2318, 2317, 2317, 2319, 2319, 2321, 2322, 2323, 2324, 2325, 2325, 2327, 2326, 2329, 2330, 2331, 2333, 2334, 2336, 2337, 2340, 2340, 2342, 2343, 2345, 2345, 2346, 2347, 2348, 2349, 2350, 2352, 2353, 2354, 2354, 2355, 2355, 2356, 2357, 2358, 2358, 2359, 2359, 2359, 2360, 2359, 2360, 2360, 2360, 2360, 2361, 2360, 2361, 2360, 2361, 2362, 2361, 2362, 2361, 2361, 2362, 2362, 2361, 2362};
        */
        int[,] value_freq_amp_byte =  {{311, 309, 309, 310, 312, 313, 315, 317, 320, 323, 327, 331, 334, 338, 343, 346, 351, 355, 360, 363, 368, 372, 376, 380, 385, 388, 393, 395, 399, 402, 406, 410, 414, 417, 420, 415, 404, 405, 415, 422, 427, 431, 434, 438, 440, 442, 446, 445, 449, 448, 451, 450, 451, 451, 452, 453, 452, 452, 451, 450, 450, 451, 451, 452, 455, 455, 458, 459, 462, 464, 469, 471, 476, 480, 486, 492, 497, 505, 511, 517, 521, 526, 528, 528, 531, 532, 535, 541, 547, 553, 559, 567, 573, 581, 588, 596, 602, 611, 616},
{320, 318, 320, 321, 321, 323, 325, 327, 329, 331, 335, 338, 342, 345, 348, 352, 355, 360, 365, 368, 374, 378, 382, 386, 390, 394, 398, 401, 405, 408, 412, 416, 419, 424, 426, 424, 412, 414, 424, 428, 435, 440, 444, 448, 450, 453, 456, 456, 461, 461, 463, 464, 464, 467, 466, 467, 467, 469, 468, 466, 466, 468, 468, 469, 471, 474, 478, 480, 485, 488, 491, 495, 499, 505, 511, 519, 525, 532, 541, 547, 552, 557, 559, 559, 560, 563, 566, 570, 576, 583, 588, 596, 602, 610, 618, 626, 632, 641, 647} ,
{333, 332, 334, 335, 335, 336, 338, 340, 342, 345, 349, 351, 355, 358, 360, 362, 365, 369, 374, 378, 382, 387, 390, 395, 398, 401, 406, 409, 413, 417, 421, 425, 428, 433, 436, 435, 426, 426, 437, 441, 446, 451, 456, 461, 463, 468, 472, 471, 477, 476, 480, 481, 482, 486, 486, 488, 489, 491, 489, 489, 489, 491, 491, 493, 495, 499, 503, 505, 509, 512, 517, 520, 526, 532, 538, 546, 553, 562, 569, 576, 581, 585, 589, 589, 591, 593, 596, 600, 606, 612, 617, 625, 631, 639, 647, 655, 662, 672, 679} ,
{350, 350, 352, 352, 353, 355, 356, 358, 360, 362, 366, 369, 374, 375, 377, 379, 380, 385, 389, 392, 397, 401, 404, 408, 413, 416, 419, 422, 426, 431, 434, 438, 442, 448, 450, 451, 444, 443, 454, 457, 463, 468, 472, 478, 481, 484, 489, 488, 495, 494, 500, 500, 503, 508, 508, 512, 512, 516, 515, 514, 514, 517, 516, 518, 522, 525, 530, 533, 538, 541, 546, 549, 554, 561, 568, 575, 582, 590, 597, 604, 610, 615, 618, 618, 621, 624, 626, 630, 636, 643, 648, 655, 661, 670, 677, 685, 693, 704, 711} ,
{370, 371, 373, 374, 374, 377, 378, 380, 382, 384, 389, 390, 397, 397, 398, 399, 401, 405, 409, 412, 417, 420, 423, 427, 431, 434, 438, 441, 445, 449, 453, 458, 460, 468, 468, 471, 466, 465, 475, 478, 486, 490, 494, 500, 502, 506, 513, 512, 520, 518, 524, 526, 528, 534, 536, 539, 541, 545, 543, 542, 543, 545, 544, 547, 550, 554, 559, 563, 567, 570, 575, 578, 584, 588, 596, 604, 610, 618, 626, 633, 639, 645, 649, 649, 652, 654, 656, 661, 667, 674, 678, 687, 693, 702, 710, 718, 726, 737, 744} ,
{392, 395, 397, 397, 398, 401, 403, 405, 407, 409, 415, 416, 422, 423, 424, 425, 425, 430, 433, 435, 442, 445, 446, 450, 455, 458, 461, 464, 468, 473, 476, 482, 484, 492, 493, 495, 492, 492, 502, 504, 512, 516, 521, 528, 529, 534, 541, 539, 548, 546, 553, 556, 558, 566, 567, 571, 571, 575, 575, 573, 573, 576, 574, 577, 581, 585, 589, 593, 597, 599, 604, 607, 613, 618, 626, 633, 640, 647, 656, 663, 670, 676, 680, 681, 683, 685, 689, 693, 698, 706, 712, 719, 725, 734, 743, 752, 760, 771, 779} ,
{417, 420, 422, 424, 425, 428, 428, 431, 433, 435, 441, 442, 449, 450, 451, 452, 453, 457, 462, 463, 470, 472, 474, 478, 482, 485, 489, 492, 497, 500, 504, 511, 513, 520, 521, 526, 523, 522, 533, 534, 543, 547, 552, 558, 560, 566, 572, 570, 579, 578, 585, 587, 589, 598, 598, 602, 602, 607, 605, 604, 605, 606, 605, 608, 610, 614, 619, 623, 627, 629, 633, 637, 643, 648, 656, 663, 670, 678, 687, 694, 701, 708, 712, 713, 716, 718, 721, 725, 732, 738, 745, 753, 760, 769, 777, 786, 796, 806, 815} ,
{444, 448, 450, 452, 453, 455, 456, 459, 461, 463, 469, 471, 478, 479, 480, 482, 482, 486, 490, 493, 499, 502, 503, 508, 512, 515, 519, 523, 527, 531, 535, 541, 543, 551, 552, 557, 555, 554, 565, 566, 574, 578, 584, 589, 591, 596, 603, 601, 611, 608, 615, 617, 619, 626, 627, 631, 632, 635, 635, 635, 634, 637, 635, 637, 640, 643, 648, 651, 656, 659, 663, 667, 672, 679, 686, 694, 700, 709, 717, 726, 733, 739, 744, 745, 748, 750, 753, 759, 765, 772, 778, 786, 794, 802, 811, 821, 830, 841, 850} ,
{473, 476, 478, 480, 482, 483, 486, 489, 491, 493, 498, 500, 505, 506, 508, 510, 512, 517, 520, 524, 529, 532, 536, 538, 543, 545, 550, 553, 557, 563, 565, 571, 574, 581, 585, 587, 587, 585, 596, 598, 606, 611, 616, 621, 625, 628, 635, 635, 642, 641, 646, 648, 652, 656, 658, 662, 663, 666, 666, 665, 665, 666, 666, 667, 671, 674, 678, 682, 687, 690, 695, 698, 704, 709, 717, 724, 733, 741, 750, 758, 765, 771, 775, 779, 781, 784, 788, 793, 799, 806, 812, 822, 829, 839, 847, 858, 867, 878, 887} ,
{502, 505, 507, 508, 510, 513, 515, 517, 521, 522, 527, 528, 534, 535, 537, 538, 539, 546, 548, 551, 556, 559, 563, 565, 571, 574, 577, 582, 586, 591, 594, 601, 604, 611, 614, 617, 616, 616, 625, 628, 636, 640, 645, 650, 653, 658, 663, 664, 670, 670, 675, 677, 680, 685, 686, 691, 691, 695, 695, 695, 695, 695, 695, 697, 700, 702, 708, 712, 717, 720, 723, 728, 734, 740, 748, 755, 763, 773, 782, 790, 797, 805, 808, 811, 814, 817, 821, 828, 832, 841, 846, 856, 864, 874, 884, 893, 903, 914, 924} ,
{533, 535, 537, 539, 540, 542, 544, 547, 550, 551, 556, 558, 562, 564, 566, 567, 568, 573, 577, 581, 585, 589, 592, 595, 601, 603, 607, 612, 615, 621, 624, 631, 633, 641, 644, 647, 646, 647, 655, 658, 665, 670, 675, 680, 684, 687, 693, 693, 699, 699, 704, 706, 710, 714, 717, 720, 722, 725, 724, 724, 724, 726, 725, 727, 730, 733, 738, 742, 747, 749, 756, 759, 765, 771, 779, 787, 795, 804, 814, 822, 830, 836, 842, 845, 848, 852, 856, 863, 866, 875, 882, 891, 899, 910, 920, 930, 940, 951, 961} ,
{563, 565, 567, 568, 570, 572, 574, 576, 580, 581, 586, 588, 592, 593, 595, 598, 598, 603, 607, 610, 615, 618, 622, 625, 630, 633, 637, 641, 646, 651, 653, 661, 665, 671, 675, 677, 677, 676, 686, 689, 696, 700, 706, 710, 715, 718, 724, 723, 731, 730, 735, 736, 740, 744, 746, 751, 751, 755, 754, 754, 753, 755, 755, 757, 760, 763, 768, 773, 779, 781, 786, 790, 797, 802, 811, 819, 827, 836, 846, 854, 863, 870, 875, 878, 882, 886, 891, 898, 903, 911, 918, 927, 936, 946, 956, 967, 978, 990, 999} ,
{593, 595, 597, 598, 600, 603, 604, 606, 609, 610, 615, 617, 622, 623, 625, 627, 627, 633, 637, 640, 645, 647, 651, 655, 660, 663, 667, 672, 676, 681, 684, 691, 693, 701, 704, 708, 707, 707, 717, 719, 727, 730, 736, 741, 745, 748, 753, 753, 760, 759, 765, 766, 771, 774, 777, 781, 782, 785, 785, 784, 785, 786, 786, 788, 791, 795, 800, 804, 810, 812, 818, 821, 828, 834, 842, 851, 860, 868, 879, 888, 897, 904, 909, 912, 916, 920, 926, 932, 938, 947, 953, 964, 973, 982, 994, 1003, 1015, 1028, 1037} ,
{623, 625, 627, 628, 629, 632, 633, 636, 638, 640, 644, 647, 651, 653, 654, 656, 657, 662, 666, 669, 674, 677, 680, 684, 689, 692, 697, 701, 705, 712, 714, 721, 724, 731, 734, 737, 737, 737, 746, 749, 757, 760, 766, 771, 775, 777, 784, 784, 789, 790, 795, 797, 800, 805, 807, 811, 812, 815, 814, 815, 815, 816, 816, 819, 822, 826, 831, 836, 841, 844, 849, 853, 861, 866, 875, 883, 893, 902, 912, 921, 930, 938, 942, 947, 950, 955, 960, 967, 973, 982, 989, 999, 1008, 1019, 1030, 1041, 1052, 1064, 1075} ,
{652, 654, 658, 657, 660, 661, 664, 666, 668, 670, 674, 676, 681, 682, 684, 686, 687, 692, 696, 698, 703, 706, 710, 714, 720, 722, 727, 731, 735, 741, 744, 750, 754, 761, 765, 768, 767, 768, 777, 780, 787, 791, 796, 801, 805, 809, 814, 814, 819, 820, 825, 827, 830, 835, 837, 841, 842, 846, 845, 846, 845, 846, 847, 849, 853, 856, 862, 866, 872, 876, 881, 886, 891, 898, 906, 916, 925, 934, 946, 954, 965, 971, 976, 980, 985, 990, 994, 1001, 1009, 1017, 1026, 1035, 1045, 1056, 1067, 1079, 1090, 1103, 1115} ,
{683, 684, 687, 688, 690, 693, 693, 695, 698, 699, 704, 706, 711, 712, 714, 715, 717, 723, 726, 729, 733, 737, 740, 745, 748, 752, 757, 761, 766, 772, 774, 781, 785, 792, 795, 798, 797, 797, 807, 810, 817, 821, 826, 830, 835, 838, 844, 843, 849, 850, 855, 857, 860, 865, 867, 871, 871, 876, 874, 875, 876, 877, 878, 880, 883, 887, 893, 898, 904, 907, 912, 917, 925, 930, 940, 948, 958, 968, 978, 988, 997, 1004, 1011, 1014, 1019, 1024, 1030, 1038, 1045, 1054, 1062, 1073, 1082, 1093, 1105, 1116, 1129, 1142, 1153} ,
{714, 715, 717, 719, 720, 722, 723, 725, 727, 729, 733, 735, 740, 742, 743, 746, 747, 753, 756, 759, 764, 767, 770, 774, 779, 783, 787, 792, 796, 802, 805, 812, 815, 821, 826, 829, 828, 828, 837, 840, 848, 852, 857, 862, 865, 868, 873, 873, 879, 880, 885, 886, 889, 894, 897, 901, 902, 906, 905, 906, 906, 907, 908, 911, 914, 918, 923, 929, 934, 939, 945, 949, 956, 963, 972, 981, 991, 1001, 1012, 1021, 1031, 1040, 1045, 1049, 1054, 1060, 1066, 1074, 1080, 1091, 1099, 1109, 1120, 1131, 1143, 1155, 1168, 1181, 1193} ,
{745, 746, 747, 750, 750, 752, 753, 755, 758, 759, 763, 765, 770, 772, 773, 776, 777, 782, 786, 790, 793, 797, 800, 804, 809, 813, 817, 822, 826, 832, 835, 842, 845, 852, 857, 859, 858, 858, 867, 870, 877, 881, 886, 891, 894, 898, 902, 903, 909, 909, 914, 915, 919, 924, 926, 930, 931, 936, 935, 936, 935, 937, 939, 941, 945, 949, 955, 960, 966, 970, 976, 982, 988, 995, 1005, 1015, 1024, 1035, 1046, 1055, 1064, 1073, 1080, 1084, 1090, 1095, 1102, 1109, 1117, 1127, 1135, 1147, 1156, 1169, 1181, 1193, 1207, 1220, 1233} ,
{775, 777, 779, 780, 781, 783, 785, 786, 790, 791, 795, 797, 800, 803, 804, 804, 806, 812, 816, 819, 823, 826, 831, 834, 840, 844, 848, 853, 855, 863, 864, 872, 876, 880, 887, 888, 887, 888, 897, 900, 907, 909, 916, 920, 923, 927, 931, 933, 938, 938, 944, 945, 950, 953, 956, 960, 961, 966, 965, 966, 966, 968, 969, 972, 976, 981, 986, 992, 998, 1002, 1008, 1014, 1022, 1029, 1038, 1046, 1058, 1067, 1079, 1089, 1099, 1108, 1114, 1119, 1125, 1131, 1137, 1146, 1153, 1164, 1173, 1184, 1196, 1207, 1220, 1233, 1247, 1261, 1273} ,
{806, 808, 809, 810, 812, 813, 815, 817, 821, 821, 825, 826, 831, 833, 834, 836, 836, 842, 846, 849, 854, 858, 862, 865, 870, 873, 878, 883, 886, 893, 895, 903, 906, 911, 916, 918, 918, 917, 926, 928, 936, 939, 944, 949, 953, 956, 960, 963, 967, 968, 973, 974, 978, 982, 985, 990, 990, 995, 995, 995, 996, 997, 1000, 1002, 1007, 1011, 1018, 1024, 1030, 1035, 1041, 1046, 1053, 1061, 1071, 1081, 1091, 1102, 1113, 1123, 1134, 1143, 1149, 1154, 1160, 1166, 1173, 1181, 1190, 1201, 1211, 1223, 1234, 1246, 1259, 1272, 1287, 1301, 1314} ,
{837, 838, 840, 841, 843, 844, 846, 847, 851, 852, 856, 857, 861, 862, 865, 867, 867, 873, 876, 880, 883, 887, 893, 895, 901, 903, 909, 913, 915, 923, 925, 931, 935, 941, 945, 948, 947, 947, 955, 958, 965, 969, 974, 977, 982, 985, 989, 991, 996, 997, 1001, 1004, 1008, 1012, 1015, 1019, 1021, 1025, 1025, 1027, 1028, 1029, 1031, 1034, 1038, 1042, 1048, 1055, 1061, 1066, 1072, 1077, 1086, 1094, 1103, 1113, 1124, 1135, 1146, 1157, 1168, 1177, 1184, 1189, 1196, 1202, 1209, 1218, 1227, 1237, 1247, 1260, 1272, 1285, 1299, 1312, 1327, 1341, 1355},
{867, 868, 870, 871, 872, 875, 876, 878, 880, 882, 886, 887, 891, 893, 895, 897, 898, 903, 906, 911, 914, 917, 921, 925, 929, 933, 937, 942, 945, 952, 954, 961, 965, 970, 976, 977, 977, 976, 985, 988, 995, 997, 1003, 1006, 1011, 1015, 1019, 1020, 1025, 1026, 1032, 1034, 1038, 1042, 1045, 1050, 1052, 1055, 1056, 1058, 1057, 1060, 1060, 1065, 1069, 1073, 1080, 1086, 1093, 1098, 1104, 1110, 1118, 1126, 1136, 1145, 1157, 1168, 1180, 1191, 1202, 1211, 1219, 1225, 1231, 1238, 1246, 1255, 1264, 1275, 1286, 1298, 1311, 1324, 1340, 1352, 1368, 1384, 1396} ,
{899, 900, 901, 903, 904, 906, 907, 908, 911, 913, 917, 918, 922, 924, 926, 927, 928, 934, 938, 941, 944, 948, 951, 955, 960, 963, 968, 972, 975, 982, 984, 991, 995, 1001, 1005, 1007, 1006, 1006, 1014, 1017, 1024, 1027, 1033, 1036, 1041, 1044, 1049, 1050, 1055, 1055, 1060, 1062, 1067, 1071, 1074, 1078, 1081, 1084, 1086, 1086, 1087, 1090, 1092, 1095, 1099, 1105, 1112, 1117, 1125, 1129, 1136, 1142, 1151, 1160, 1170, 1179, 1191, 1202, 1215, 1226, 1238, 1247, 1254, 1260, 1267, 1274, 1283, 1293, 1302, 1313, 1324, 1338, 1351, 1364, 1379, 1394, 1408, 1424, 1439} ,
{929, 931, 932, 933, 934, 936, 938, 938, 941, 943, 947, 948, 952, 954, 956, 958, 959, 964, 968, 971, 974, 978, 982, 984, 990, 994, 997, 1003, 1005, 1012, 1014, 1021, 1025, 1030, 1036, 1038, 1036, 1036, 1044, 1047, 1053, 1057, 1062, 1066, 1069, 1073, 1077, 1079, 1084, 1085, 1090, 1093, 1097, 1101, 1104, 1109, 1110, 1115, 1115, 1117, 1117, 1120, 1122, 1125, 1131, 1136, 1142, 1148, 1156, 1160, 1168, 1175, 1183, 1192, 1202, 1212, 1225, 1236, 1249, 1261, 1272, 1282, 1290, 1297, 1304, 1312, 1321, 1329, 1338, 1351, 1363, 1377, 1390, 1404, 1419, 1434, 1450, 1466, 1481} ,
{961, 961, 963, 964, 966, 967, 969, 970, 973, 973, 977, 979, 982, 984, 986, 989, 990, 995, 998, 1002, 1004, 1008, 1012, 1015, 1020, 1024, 1028, 1033, 1036, 1042, 1044, 1051, 1054, 1061, 1065, 1066, 1066, 1065, 1074, 1076, 1083, 1086, 1091, 1096, 1099, 1102, 1106, 1109, 1113, 1115, 1119, 1121, 1126, 1129, 1133, 1138, 1139, 1144, 1145, 1146, 1148, 1149, 1153, 1156, 1161, 1166, 1173, 1179, 1187, 1193, 1200, 1207, 1216, 1225, 1236, 1247, 1258, 1270, 1283, 1295, 1307, 1318, 1325, 1332, 1340, 1348, 1357, 1368, 1378, 1390, 1402, 1415, 1429, 1444, 1459, 1474, 1492, 1509, 1522} ,
{992, 993, 994, 994, 996, 997, 999, 1001, 1003, 1004, 1008, 1010, 1012, 1015, 1017, 1019, 1020, 1025, 1028, 1032, 1035, 1038, 1043, 1045, 1051, 1054, 1058, 1063, 1064, 1072, 1074, 1081, 1085, 1090, 1094, 1096, 1095, 1094, 1103, 1104, 1111, 1115, 1121, 1124, 1128, 1130, 1135, 1137, 1141, 1143, 1148, 1149, 1153, 1159, 1161, 1166, 1169, 1173, 1174, 1175, 1177, 1180, 1183, 1185, 1191, 1197, 1204, 1211, 1218, 1225, 1233, 1239, 1249, 1257, 1269, 1280, 1293, 1306, 1319, 1331, 1343, 1353, 1362, 1370, 1377, 1385, 1395, 1406, 1416, 1429, 1441, 1456, 1470, 1484, 1501, 1517, 1533, 1550, 1567} ,
{1022, 1024, 1025, 1027, 1027, 1029, 1030, 1032, 1035, 1034, 1039, 1041, 1044, 1046, 1047, 1050, 1051, 1055, 1059, 1063, 1065, 1069, 1072, 1075, 1081, 1084, 1088, 1093, 1095, 1102, 1104, 1110, 1114, 1119, 1125, 1125, 1124, 1124, 1132, 1134, 1141, 1144, 1149, 1152, 1156, 1160, 1164, 1165, 1170, 1171, 1177, 1179, 1184, 1188, 1191, 1196, 1198, 1203, 1204, 1206, 1208, 1210, 1213, 1217, 1223, 1228, 1236, 1244, 1251, 1258, 1265, 1272, 1282, 1292, 1303, 1314, 1327, 1340, 1354, 1367, 1379, 1390, 1398, 1406, 1415, 1423, 1433, 1445, 1455, 1468, 1480, 1496, 1510, 1526, 1543, 1558, 1576, 1593, 1609} ,
{1054, 1055, 1056, 1058, 1059, 1060, 1061, 1063, 1065, 1066, 1069, 1070, 1074, 1076, 1078, 1080, 1082, 1086, 1090, 1093, 1096, 1099, 1103, 1106, 1111, 1114, 1118, 1124, 1125, 1131, 1133, 1140, 1142, 1148, 1153, 1155, 1153, 1153, 1161, 1163, 1170, 1172, 1178, 1181, 1185, 1188, 1191, 1194, 1199, 1200, 1205, 1207, 1212, 1216, 1220, 1226, 1228, 1233, 1234, 1236, 1238, 1241, 1244, 1248, 1254, 1260, 1268, 1276, 1284, 1290, 1298, 1305, 1315, 1325, 1337, 1348, 1361, 1376, 1389, 1401, 1414, 1426, 1435, 1443, 1452, 1461, 1471, 1483, 1493, 1507, 1521, 1536, 1552, 1567, 1583, 1600, 1617, 1635, 1651} ,
{1087, 1087, 1088, 1089, 1089, 1091, 1093, 1093, 1097, 1098, 1101, 1102, 1106, 1106, 1110, 1110, 1110, 1116, 1118, 1122, 1125, 1128, 1133, 1135, 1140, 1143, 1147, 1152, 1155, 1161, 1163, 1168, 1172, 1177, 1182, 1184, 1181, 1181, 1190, 1192, 1198, 1201, 1205, 1209, 1214, 1217, 1221, 1222, 1228, 1229, 1235, 1236, 1242, 1246, 1249, 1256, 1257, 1263, 1264, 1266, 1269, 1271, 1275, 1280, 1286, 1292, 1300, 1308, 1316, 1323, 1330, 1338, 1349, 1359, 1372, 1382, 1395, 1409, 1423, 1437, 1450, 1462, 1471, 1479, 1489, 1498, 1509, 1521, 1532, 1547, 1560, 1576, 1590, 1607, 1625, 1640, 1659, 1676, 1694} ,
{1117, 1117, 1119, 1120, 1120, 1121, 1123, 1125, 1128, 1128, 1132, 1132, 1136, 1137, 1138, 1140, 1139, 1146, 1148, 1152, 1155, 1159, 1162, 1165, 1169, 1172, 1178, 1182, 1184, 1190, 1192, 1199, 1201, 1207, 1211, 1212, 1210, 1210, 1219, 1220, 1226, 1229, 1235, 1238, 1241, 1244, 1249, 1251, 1257, 1258, 1263, 1266, 1271, 1276, 1279, 1286, 1288, 1293, 1295, 1297, 1299, 1303, 1306, 1310, 1317, 1324, 1332, 1340, 1348, 1355, 1364, 1371, 1381, 1393, 1405, 1417, 1431, 1444, 1460, 1472, 1486, 1498, 1508, 1516, 1526, 1536, 1546, 1560, 1571, 1585, 1600, 1615, 1631, 1647, 1664, 1682, 1700, 1717, 1735} ,
{1148, 1148, 1148, 1150, 1152, 1153, 1154, 1156, 1158, 1159, 1161, 1163, 1166, 1168, 1169, 1171, 1170, 1177, 1180, 1183, 1185, 1188, 1193, 1195, 1200, 1202, 1207, 1211, 1213, 1220, 1221, 1228, 1230, 1236, 1240, 1241, 1240, 1239, 1247, 1250, 1257, 1258, 1262, 1267, 1271, 1274, 1278, 1280, 1285, 1286, 1292, 1294, 1300, 1305, 1309, 1315, 1317, 1323, 1325, 1328, 1331, 1334, 1338, 1343, 1349, 1355, 1363, 1373, 1381, 1388, 1397, 1404, 1415, 1427, 1440, 1452, 1467, 1480, 1494, 1508, 1523, 1535, 1546, 1555, 1564, 1574, 1585, 1597, 1610, 1625, 1638, 1655, 1670, 1687, 1705, 1722, 1741, 1760, 1777} ,
{1179, 1179, 1180, 1181, 1182, 1183, 1185, 1186, 1189, 1189, 1192, 1193, 1196, 1198, 1200, 1201, 1202, 1207, 1209, 1213, 1214, 1218, 1223, 1225, 1229, 1233, 1237, 1240, 1243, 1249, 1250, 1258, 1260, 1264, 1270, 1271, 1269, 1268, 1276, 1278, 1285, 1288, 1293, 1296, 1301, 1303, 1307, 1309, 1316, 1315, 1322, 1324, 1329, 1334, 1339, 1344, 1347, 1353, 1354, 1357, 1361, 1364, 1368, 1373, 1381, 1386, 1394, 1404, 1413, 1420, 1429, 1438, 1450, 1460, 1474, 1486, 1500, 1515, 1530, 1545, 1559, 1571, 1583, 1590, 1601, 1612, 1622, 1635, 1647, 1663, 1677, 1693, 1709, 1727, 1745, 1762, 1781, 1800, 1817} ,
{1210, 1210, 1211, 1211, 1213, 1214, 1214, 1216, 1219, 1219, 1222, 1225, 1228, 1228, 1230, 1231, 1232, 1237, 1240, 1243, 1246, 1248, 1252, 1255, 1260, 1262, 1267, 1270, 1273, 1279, 1280, 1287, 1289, 1294, 1298, 1300, 1298, 1297, 1306, 1308, 1314, 1318, 1321, 1326, 1329, 1331, 1336, 1339, 1344, 1345, 1351, 1354, 1358, 1363, 1369, 1375, 1377, 1383, 1385, 1388, 1391, 1395, 1399, 1404, 1411, 1419, 1428, 1436, 1446, 1453, 1463, 1472, 1484, 1494, 1508, 1521, 1536, 1551, 1565, 1581, 1594, 1607, 1619, 1627, 1638, 1649, 1660, 1673, 1686, 1703, 1716, 1733, 1748, 1767, 1785, 1803, 1822, 1842, 1859} ,
{1241, 1241, 1242, 1242, 1243, 1244, 1246, 1247, 1249, 1250, 1253, 1255, 1258, 1258, 1261, 1263, 1263, 1268, 1269, 1274, 1275, 1279, 1282, 1285, 1291, 1292, 1296, 1300, 1302, 1309, 1310, 1316, 1318, 1324, 1328, 1329, 1328, 1327, 1334, 1337, 1344, 1346, 1351, 1355, 1358, 1361, 1366, 1367, 1373, 1374, 1381, 1383, 1388, 1393, 1398, 1404, 1407, 1414, 1416, 1418, 1422, 1426, 1430, 1435, 1443, 1451, 1459, 1468, 1479, 1487, 1496, 1505, 1517, 1528, 1542, 1555, 1570, 1586, 1600, 1616, 1631, 1643, 1654, 1664, 1675, 1686, 1697, 1711, 1724, 1740, 1755, 1772, 1787, 1805, 1825, 1842, 1862, 1881, 1901} ,
{1272, 1272, 1273, 1274, 1274, 1277, 1276, 1278, 1280, 1281, 1283, 1285, 1289, 1290, 1291, 1293, 1294, 1298, 1300, 1305, 1306, 1309, 1313, 1315, 1321, 1322, 1326, 1329, 1333, 1338, 1339, 1346, 1349, 1353, 1358, 1359, 1358, 1357, 1364, 1366, 1373, 1376, 1380, 1384, 1388, 1390, 1394, 1397, 1402, 1403, 1409, 1412, 1418, 1423, 1428, 1435, 1438, 1443, 1446, 1450, 1452, 1457, 1461, 1468, 1475, 1481, 1492, 1502, 1511, 1519, 1528, 1539, 1552, 1562, 1576, 1590, 1605, 1620, 1636, 1652, 1666, 1680, 1690, 1700, 1711, 1722, 1734, 1748, 1762, 1779, 1793, 1810, 1827, 1846, 1864, 1882, 1903, 1923, 1941} ,
{1304, 1303, 1305, 1305, 1306, 1307, 1308, 1309, 1312, 1312, 1314, 1316, 1318, 1319, 1320, 1323, 1325, 1328, 1331, 1335, 1337, 1340, 1344, 1345, 1350, 1352, 1356, 1360, 1363, 1368, 1370, 1376, 1378, 1383, 1387, 1388, 1388, 1386, 1392, 1395, 1402, 1405, 1408, 1412, 1416, 1419, 1423, 1425, 1431, 1432, 1439, 1441, 1447, 1452, 1458, 1464, 1468, 1474, 1477, 1481, 1484, 1489, 1493, 1499, 1507, 1514, 1524, 1534, 1545, 1552, 1563, 1572, 1584, 1598, 1611, 1625, 1641, 1655, 1672, 1687, 1701, 1715, 1727, 1737, 1748, 1760, 1772, 1786, 1799, 1817, 1832, 1849, 1866, 1885, 1904, 1924, 1943, 1963, 1982} ,
{1335, 1334, 1335, 1336, 1336, 1337, 1338, 1340, 1341, 1343, 1345, 1346, 1349, 1350, 1351, 1353, 1354, 1359, 1362, 1366, 1366, 1370, 1373, 1375, 1379, 1382, 1386, 1390, 1392, 1397, 1398, 1405, 1408, 1412, 1416, 1418, 1416, 1415, 1421, 1425, 1431, 1433, 1438, 1442, 1445, 1448, 1453, 1455, 1461, 1461, 1468, 1471, 1478, 1483, 1488, 1494, 1498, 1505, 1507, 1512, 1515, 1520, 1525, 1530, 1539, 1548, 1559, 1568, 1577, 1585, 1596, 1605, 1618, 1630, 1644, 1659, 1675, 1689, 1705, 1722, 1737, 1750, 1763, 1773, 1784, 1795, 1808, 1822, 1837, 1853, 1869, 1887, 1905, 1923, 1943, 1962, 1983, 2003, 2022} ,
{1366, 1366, 1366, 1367, 1369, 1369, 1370, 1370, 1373, 1372, 1375, 1376, 1379, 1381, 1382, 1384, 1385, 1390, 1391, 1394, 1397, 1401, 1403, 1405, 1410, 1412, 1415, 1419, 1421, 1427, 1429, 1435, 1437, 1442, 1445, 1447, 1445, 1444, 1452, 1454, 1461, 1463, 1467, 1471, 1475, 1478, 1483, 1484, 1491, 1491, 1498, 1502, 1508, 1513, 1518, 1525, 1529, 1536, 1539, 1543, 1546, 1552, 1557, 1563, 1572, 1580, 1590, 1601, 1611, 1619, 1629, 1640, 1653, 1665, 1679, 1693, 1710, 1726, 1742, 1758, 1773, 1786, 1798, 1810, 1821, 1832, 1845, 1861, 1875, 1892, 1907, 1926, 1943, 1963, 1983, 2002, 2024, 2043, 2062} ,
{1398, 1398, 1398, 1398, 1399, 1399, 1401, 1402, 1405, 1405, 1407, 1408, 1411, 1411, 1412, 1413, 1413, 1418, 1421, 1423, 1427, 1430, 1433, 1434, 1438, 1442, 1445, 1449, 1450, 1457, 1457, 1464, 1466, 1471, 1476, 1476, 1474, 1473, 1480, 1483, 1490, 1492, 1498, 1501, 1504, 1507, 1512, 1514, 1520, 1522, 1528, 1531, 1537, 1544, 1549, 1556, 1561, 1566, 1569, 1573, 1577, 1584, 1589, 1595, 1603, 1612, 1622, 1632, 1643, 1652, 1664, 1674, 1686, 1699, 1715, 1728, 1745, 1760, 1776, 1794, 1808, 1822, 1834, 1845, 1857, 1869, 1883, 1898, 1913, 1930, 1946, 1967, 1983, 2002, 2023, 2041, 2063, 2084, 2100} ,
{1429, 1428, 1430, 1430, 1430, 1430, 1432, 1433, 1435, 1436, 1439, 1439, 1441, 1442, 1443, 1445, 1444, 1449, 1452, 1454, 1457, 1460, 1462, 1465, 1469, 1472, 1475, 1478, 1480, 1487, 1488, 1494, 1496, 1501, 1505, 1506, 1506, 1505, 1511, 1514, 1520, 1522, 1527, 1531, 1534, 1537, 1542, 1544, 1551, 1552, 1559, 1562, 1567, 1574, 1579, 1586, 1591, 1597, 1600, 1606, 1609, 1615, 1620, 1627, 1636, 1645, 1655, 1665, 1677, 1685, 1696, 1708, 1720, 1732, 1749, 1763, 1779, 1794, 1811, 1827, 1843, 1858, 1871, 1883, 1894, 1906, 1922, 1936, 1950, 1969, 1985, 2004, 2023, 2041, 2062, 2080, 2100, 2120, 2135} ,
{1460, 1460, 1460, 1460, 1462, 1461, 1463, 1463, 1465, 1466, 1469, 1469, 1471, 1473, 1474, 1474, 1473, 1480, 1482, 1484, 1487, 1490, 1493, 1495, 1499, 1501, 1505, 1509, 1509, 1516, 1517, 1523, 1525, 1531, 1536, 1536, 1534, 1533, 1541, 1542, 1549, 1552, 1557, 1561, 1564, 1567, 1572, 1575, 1581, 1583, 1589, 1592, 1597, 1603, 1610, 1617, 1621, 1628, 1632, 1636, 1641, 1651, 1653, 1659, 1668, 1677, 1687, 1698, 1709, 1719, 1730, 1740, 1754, 1766, 1782, 1797, 1813, 1830, 1846, 1863, 1879, 1893, 1906, 1918, 1929, 1943, 1958, 1973, 1989, 2007, 2024, 2042, 2059, 2080, 2099, 2117, 2134, 2146, 2169 } ,
{1491, 1491, 1491, 1492, 1492, 1492, 1494, 1495, 1497, 1499, 1500, 1500, 1503, 1503, 1505, 1505, 1505, 1509, 1513, 1516, 1518, 1520, 1523, 1525, 1528, 1532, 1534, 1538, 1540, 1546, 1548, 1553, 1556, 1561, 1566, 1566, 1564, 1564, 1571, 1573, 1580, 1582, 1587, 1591, 1595, 1597, 1603, 1604, 1611, 1612, 1618, 1622, 1628, 1634, 1639, 1647, 1653, 1659, 1662, 1668, 1672, 1678, 1684, 1690, 1701, 1708, 1720, 1730, 1741, 1751, 1762, 1773, 1786, 1800, 1815, 1830, 1847, 1863, 1880, 1897, 1913, 1929, 1940, 1954, 1966, 1979, 1994, 2010, 2025, 2043, 2061, 2079, 2097, 2117, 2135, 2153, 2167, 2186, 2200} ,
{1522, 1522, 1522, 1522, 1523, 1524, 1525, 1525, 1527, 1528, 1531, 1531, 1533, 1535, 1535, 1535, 1535, 1541, 1543, 1546, 1548, 1551, 1553, 1555, 1559, 1561, 1565, 1568, 1570, 1576, 1576, 1583, 1585, 1591, 1595, 1596, 1594, 1593, 1601, 1602, 1610, 1611, 1617, 1620, 1623, 1627, 1630, 1633, 1640, 1641, 1649, 1651, 1657, 1664, 1670, 1679, 1683, 1690, 1694, 1698, 1703, 1709, 1715, 1722, 1732, 1741, 1752, 1762, 1774, 1784, 1795, 1807, 1819, 1833, 1848, 1864, 1880, 1897, 1914, 1931, 1948, 1962, 1977, 1988, 2002, 2015, 2030, 2046, 2061, 2080, 2096, 2115, 2133, 2150, 2169, 2185, 2202, 2217, 2229} ,
{1553, 1553, 1554, 1555, 1556, 1555, 1556, 1557, 1559, 1559, 1561, 1562, 1564, 1565, 1566, 1566, 1568, 1571, 1574, 1577, 1578, 1581, 1583, 1585, 1589, 1591, 1594, 1597, 1600, 1605, 1606, 1612, 1615, 1621, 1624, 1626, 1624, 1623, 1631, 1632, 1639, 1641, 1645, 1649, 1653, 1656, 1660, 1665, 1669, 1672, 1679, 1682, 1689, 1695, 1701, 1708, 1713, 1720, 1725, 1731, 1735, 1742, 1747, 1755, 1764, 1774, 1783, 1795, 1806, 1817, 1828, 1841, 1853, 1866, 1884, 1898, 1916, 1932, 1950, 1966, 1983, 2001, 2012, 2025, 2036, 2052, 2067, 2082, 2098, 2114, 2129, 2148, 2164, 2181, 2199, 2204, 2224, 2241, 2254} ,
{1584, 1584, 1584, 1585, 1585, 1586, 1586, 1587, 1590, 1589, 1592, 1592, 1595, 1596, 1595, 1597, 1597, 1602, 1604, 1607, 1608, 1610, 1613, 1615, 1618, 1620, 1625, 1628, 1629, 1635, 1636, 1642, 1644, 1650, 1655, 1655, 1654, 1653, 1660, 1661, 1668, 1670, 1675, 1679, 1683, 1686, 1691, 1694, 1700, 1701, 1709, 1711, 1719, 1725, 1731, 1738, 1744, 1751, 1755, 1761, 1767, 1773, 1778, 1786, 1796, 1804, 1815, 1826, 1839, 1849, 1861, 1871, 1885, 1899, 1915, 1931, 1948, 1965, 1983, 2000, 2017, 2033, 2047, 2060, 2074, 2089, 2102, 2118, 2133, 2149, 2164, 2182, 2197, 2212, 2227, 2241, 2254, 2265, 2276} ,
{1615, 1615, 1617, 1616, 1616, 1616, 1618, 1618, 1619, 1620, 1623, 1623, 1625, 1626, 1627, 1627, 1628, 1633, 1635, 1638, 1639, 1640, 1643, 1645, 1649, 1650, 1654, 1658, 1660, 1665, 1665, 1673, 1675, 1680, 1685, 1685, 1684, 1683, 1690, 1692, 1698, 1700, 1706, 1708, 1712, 1717, 1721, 1723, 1730, 1732, 1738, 1741, 1748, 1755, 1761, 1769, 1775, 1783, 1786, 1793, 1797, 1804, 1810, 1818, 1828, 1838, 1848, 1859, 1872, 1881, 1893, 1905, 1919, 1933, 1948, 1964, 1981, 2000, 2017, 2036, 2052, 2069, 2082, 2095, 2109, 2122, 2136, 2151, 2166, 2182, 2196, 2212, 2224, 2239, 2253, 2264, 2274, 2285, 2293} ,
{1647, 1647, 1647, 1647, 1647, 1649, 1650, 1648, 1651, 1651, 1653, 1653, 1656, 1657, 1656, 1659, 1658, 1663, 1666, 1668, 1669, 1672, 1673, 1675, 1678, 1680, 1684, 1688, 1690, 1694, 1697, 1703, 1706, 1710, 1716, 1715, 1715, 1713, 1720, 1722, 1729, 1731, 1736, 1739, 1744, 1747, 1751, 1754, 1760, 1762, 1769, 1772, 1779, 1786, 1792, 1801, 1806, 1814, 1818, 1824, 1829, 1836, 1842, 1849, 1859, 1871, 1880, 1891, 1904, 1914, 1926, 1938, 1951, 1965, 1982, 1999, 2017, 2034, 2052, 2069, 2087, 2103, 2117, 2129, 2142, 2156, 2169, 2184, 2196, 2211, 2224, 2239, 2250, 2261, 2273, 2283, 2283, 2302, 2302} ,
{1677, 1677, 1678, 1678, 1679, 1679, 1680, 1680, 1681, 1682, 1684, 1684, 1686, 1687, 1688, 1690, 1690, 1694, 1697, 1699, 1699, 1702, 1704, 1706, 1709, 1711, 1714, 1719, 1720, 1726, 1728, 1733, 1737, 1741, 1746, 1746, 1745, 1743, 1751, 1752, 1760, 1761, 1766, 1769, 1774, 1777, 1781, 1784, 1790, 1793, 1799, 1803, 1810, 1816, 1823, 1831, 1837, 1844, 1849, 1854, 1860, 1866, 1873, 1882, 1891, 1901, 1914, 1923, 1936, 1946, 1959, 1971, 1985, 1999, 2016, 2033, 2051, 2068, 2087, 2104, 2120, 2137, 2151, 2162, 2174, 2187, 2199, 2213, 2224, 2238, 2248, 2261, 2272, 2282, 2291, 2300, 2307, 2315, 2320} ,
{1709, 1709, 1710, 1709, 1709, 1710, 1711, 1711, 1714, 1711, 1714, 1716, 1718, 1717, 1719, 1717, 1718, 1723, 1724, 1726, 1728, 1731, 1734, 1736, 1740, 1740, 1744, 1748, 1750, 1755, 1756, 1763, 1765, 1770, 1775, 1777, 1775, 1774, 1779, 1782, 1788, 1791, 1796, 1799, 1802, 1805, 1810, 1812, 1818, 1821, 1828, 1831, 1839, 1846, 1853, 1860, 1866, 1874, 1879, 1885, 1890, 1897, 1904, 1912, 1921, 1932, 1943, 1954, 1967, 1977, 1990, 2002, 2016, 2032, 2049, 2065, 2083, 2101, 2119, 2138, 2154, 2168, 2180, 2192, 2204, 2216, 2226, 2238, 2248, 2261, 2270, 2280, 2289, 2299, 2305, 2313, 2320, 2325, 2330} ,
{1739, 1739, 1740, 1739, 1740, 1740, 1741, 1741, 1744, 1743, 1745, 1746, 1748, 1748, 1749, 1748, 1748, 1755, 1755, 1758, 1759, 1762, 1764, 1765, 1769, 1772, 1774, 1778, 1780, 1785, 1786, 1793, 1796, 1800, 1805, 1806, 1804, 1804, 1810, 1812, 1819, 1820, 1826, 1828, 1833, 1835, 1840, 1843, 1849, 1851, 1856, 1862, 1868, 1875, 1883, 1891, 1896, 1905, 1909, 1916, 1920, 1928, 1935, 1942, 1952, 1963, 1974, 1986, 1998, 2009, 2021, 2035, 2050, 2066, 2082, 2097, 2115, 2133, 2151, 2169, 2184, 2198, 2209, 2219, 2230, 2240, 2251, 2260, 2271, 2282, 2288, 2297, 2304, 2312, 2318, 2324, 2329, 2335, 2338} ,
{1771, 1770, 1771, 1769, 1770, 1771, 1772, 1772, 1775, 1774, 1777, 1776, 1778, 1779, 1780, 1778, 1779, 1784, 1786, 1787, 1789, 1792, 1795, 1796, 1800, 1801, 1804, 1808, 1811, 1815, 1817, 1823, 1827, 1831, 1835, 1836, 1834, 1833, 1839, 1841, 1848, 1850, 1855, 1858, 1863, 1865, 1869, 1872, 1878, 1879, 1887, 1891, 1898, 1905, 1912, 1921, 1926, 1935, 1940, 1947, 1952, 1959, 1965, 1974, 1984, 1994, 2006, 2018, 2030, 2041, 2054, 2069, 2082, 2098, 2115, 2130, 2147, 2165, 2181, 2198, 2211, 2223, 2234, 2245, 2255, 2263, 2270, 2280, 2289, 2297, 2303, 2309, 2318, 2323, 2330, 2334, 2338, 2342, 2346} ,
{1802, 1802, 1802, 1802, 1802, 1803, 1803, 1804, 1806, 1805, 1807, 1808, 1809, 1809, 1811, 1810, 1811, 1816, 1817, 1819, 1820, 1821, 1824, 1825, 1830, 1832, 1834, 1838, 1840, 1845, 1847, 1852, 1857, 1861, 1865, 1867, 1864, 1862, 1869, 1871, 1877, 1880, 1885, 1887, 1891, 1893, 1898, 1900, 1906, 1909, 1917, 1920, 1927, 1934, 1942, 1950, 1956, 1965, 1969, 1976, 1982, 1990, 1996, 2004, 2014, 2025, 2038, 2048, 2063, 2074, 2087, 2099, 2114, 2129, 2146, 2161, 2177, 2195, 2209, 2224, 2237, 2248, 2258, 2266, 2274, 2282, 2288, 2297, 2304, 2312, 2317, 2323, 2328, 2334, 2337, 2341, 2345, 2349, 2351} ,
{1833, 1832, 1833, 1833, 1832, 1833, 1833, 1834, 1837, 1835, 1838, 1839, 1840, 1840, 1842, 1840, 1840, 1847, 1847, 1849, 1850, 1852, 1855, 1857, 1860, 1862, 1865, 1868, 1872, 1877, 1877, 1883, 1887, 1891, 1895, 1897, 1894, 1893, 1900, 1902, 1907, 1910, 1915, 1918, 1922, 1924, 1928, 1930, 1937, 1939, 1946, 1950, 1958, 1965, 1971, 1982, 1987, 1996, 2000, 2008, 2013, 2020, 2026, 2036, 2047, 2057, 2068, 2081, 2094, 2105, 2117, 2131, 2145, 2160, 2175, 2190, 2205, 2221, 2236, 2248, 2259, 2269, 2277, 2285, 2292, 2299, 2305, 2311, 2316, 2323, 2328, 2332, 2337, 2341, 2344, 2347, 2351, 2352, 2355} ,
{1864, 1863, 1863, 1862, 1863, 1864, 1864, 1865, 1867, 1866, 1867, 1868, 1870, 1870, 1871, 1871, 1871, 1876, 1877, 1880, 1880, 1882, 1884, 1886, 1889, 1891, 1894, 1898, 1901, 1905, 1907, 1912, 1915, 1921, 1924, 1926, 1923, 1922, 1928, 1931, 1937, 1939, 1943, 1946, 1950, 1952, 1958, 1959, 1966, 1967, 1975, 1979, 1987, 1994, 2001, 2010, 2016, 2025, 2030, 2037, 2043, 2051, 2057, 2068, 2077, 2088, 2100, 2112, 2125, 2136, 2148, 2161, 2175, 2189, 2204, 2217, 2231, 2245, 2257, 2270, 2279, 2288, 2295, 2300, 2307, 2313, 2317, 2323, 2328, 2332, 2336, 2340, 2344, 2346, 2349, 2353, 2355, 2357, 2357} ,
{1894, 1893, 1894, 1894, 1894, 1894, 1895, 1895, 1897, 1896, 1898, 1898, 1899, 1900, 1901, 1901, 1902, 1906, 1906, 1908, 1909, 1912, 1914, 1915, 1919, 1920, 1924, 1927, 1930, 1934, 1936, 1942, 1945, 1949, 1953, 1955, 1952, 1952, 1958, 1959, 1965, 1968, 1972, 1975, 1979, 1980, 1986, 1988, 1994, 1997, 2004, 2009, 2015, 2023, 2030, 2039, 2046, 2056, 2061, 2069, 2073, 2082, 2088, 2098, 2108, 2118, 2130, 2142, 2155, 2165, 2178, 2190, 2203, 2216, 2229, 2242, 2255, 2267, 2277, 2283, 2297, 2304, 2309, 2314, 2320, 2326, 2329, 2332, 2336, 2340, 2343, 2347, 2350, 2352, 2355, 2356, 2357, 2361, 2362} ,
{1924, 1923, 1923, 1923, 1924, 1924, 1925, 1925, 1927, 1926, 1928, 1928, 1930, 1930, 1932, 1931, 1933, 1935, 1937, 1939, 1938, 1941, 1944, 1945, 1949, 1951, 1953, 1957, 1959, 1964, 1966, 1972, 1974, 1979, 1983, 1984, 1982, 1981, 1987, 1989, 1995, 1997, 2001, 2005, 2008, 2010, 2015, 2018, 2024, 2025, 2033, 2037, 2044, 2053, 2061, 2070, 2076, 2086, 2091, 2097, 2103, 2111, 2118, 2128, 2137, 2148, 2160, 2171, 2179, 2193, 2205, 2216, 2228, 2240, 2253, 2263, 2274, 2283, 2294, 2302, 2310, 2316, 2321, 2325, 2329, 2333, 2336, 2340, 2343, 2347, 2349, 2352, 2354, 2355, 2357, 2360, 2361, 2362, 2363} ,
{1954, 1954, 1955, 1953, 1955, 1955, 1955, 1954, 1958, 1956, 1959, 1958, 1959, 1959, 1962, 1961, 1962, 1966, 1966, 1968, 1969, 1970, 1973, 1976, 1979, 1979, 1982, 1986, 1989, 1994, 1995, 2000, 2005, 2009, 2012, 2014, 2011, 2011, 2017, 2018, 2024, 2027, 2030, 2033, 2037, 2039, 2043, 2046, 2052, 2055, 2062, 2066, 2074, 2081, 2089, 2098, 2105, 2113, 2121, 2126, 2132, 2140, 2147, 2156, 2167, 2176, 2188, 2198, 2211, 2219, 2231, 2241, 2251, 2262, 2272, 2282, 2291, 2300, 2309, 2315, 2321, 2327, 2332, 2334, 2337, 2340, 2343, 2346, 2349, 2351, 2353, 2355, 2358, 2359, 2359, 2362, 2363, 2365, 2364} ,
{1985, 1985, 1984, 1983, 1985, 1985, 1984, 1985, 1987, 1986, 1987, 1987, 1989, 1989, 1991, 1990, 1992, 1995, 1996, 1997, 1998, 2000, 2004, 2005, 2007, 2010, 2012, 2016, 2018, 2024, 2025, 2030, 2034, 2036, 2041, 2042, 2040, 2038, 2044, 2046, 2053, 2055, 2059, 2062, 2065, 2067, 2072, 2075, 2081, 2083, 2090, 2095, 2102, 2110, 2117, 2127, 2134, 2142, 2149, 2155, 2162, 2169, 2176, 2185, 2194, 2203, 2214, 2224, 2236, 2244, 2252, 2261, 2271, 2281, 2290, 2298, 2306, 2313, 2321, 2326, 2332, 2336, 2340, 2342, 2344, 2347, 2349, 2351, 2353, 2356, 2357, 2359, 2361, 2363, 2364, 2365, 2364, 2366, 2366} ,
{2014, 2015, 2016, 2014, 2014, 2015, 2016, 2016, 2018, 2016, 2018, 2019, 2020, 2019, 2020, 2019, 2018, 2024, 2025, 2025, 2028, 2029, 2031, 2034, 2037, 2038, 2040, 2044, 2048, 2052, 2053, 2059, 2063, 2066, 2070, 2070, 2070, 2068, 2074, 2075, 2082, 2083, 2087, 2090, 2093, 2096, 2099, 2102, 2109, 2111, 2118, 2123, 2131, 2138, 2144, 2157, 2162, 2170, 2175, 2183, 2188, 2196, 2203, 2211, 2220, 2228, 2237, 2247, 2257, 2265, 2273, 2280, 2289, 2297, 2305, 2312, 2318, 2325, 2330, 2335, 2339, 2342, 2344, 2347, 2350, 2352, 2354, 2355, 2358, 2359, 2360, 2361, 2362, 2365, 2366, 2367, 2367, 2368, 2367} ,
{2045, 2045, 2045, 2044, 2044, 2044, 2045, 2045, 2048, 2047, 2048, 2048, 2049, 2049, 2051, 2049, 2048, 2053, 2054, 2056, 2057, 2059, 2063, 2063, 2066, 2067, 2071, 2075, 2076, 2081, 2081, 2087, 2091, 2095, 2098, 2099, 2097, 2096, 2102, 2104, 2109, 2111, 2115, 2118, 2121, 2124, 2127, 2130, 2136, 2138, 2147, 2151, 2158, 2166, 2173, 2182, 2189, 2197, 2202, 2209, 2215, 2221, 2228, 2235, 2242, 2251, 2259, 2268, 2277, 2283, 2290, 2297, 2303, 2310, 2317, 2323, 2329, 2334, 2337, 2342, 2345, 2349, 2351, 2352, 2355, 2357, 2358, 2359, 2360, 2362, 2364, 2364, 2365, 2366, 2366, 2368, 2368, 2368, 2368} ,
{2075, 2075, 2076, 2074, 2075, 2075, 2074, 2075, 2078, 2077, 2078, 2077, 2079, 2079, 2079, 2079, 2078, 2082, 2082, 2084, 2085, 2087, 2090, 2092, 2095, 2096, 2099, 2103, 2105, 2109, 2111, 2116, 2118, 2122, 2127, 2127, 2126, 2124, 2130, 2131, 2136, 2138, 2143, 2146, 2149, 2151, 2155, 2158, 2164, 2166, 2174, 2178, 2184, 2192, 2199, 2208, 2214, 2221, 2226, 2233, 2238, 2243, 2250, 2257, 2264, 2271, 2279, 2285, 2293, 2299, 2306, 2311, 2317, 2322, 2328, 2332, 2337, 2341, 2344, 2348, 2350, 2353, 2355, 2357, 2358, 2359, 2361, 2362, 2362, 2363, 2365, 2365, 2366, 2368, 2367, 2368, 2368, 2369, 2371} ,
{2102, 2103, 2104, 2103, 2103, 2104, 2105, 2104, 2105, 2105, 2106, 2107, 2107, 2107, 2108, 2092, 2107, 2111, 2109, 2113, 2114, 2116, 2118, 2120, 2124, 2125, 2128, 2131, 2133, 2136, 2138, 2143, 2146, 2149, 2153, 2156, 2153, 2152, 2158, 2158, 2164, 2166, 2169, 2173, 2176, 2177, 2181, 2185, 2191, 2193, 2199, 2203, 2210, 2217, 2224, 2232, 2238, 2245, 2249, 2255, 2259, 2265, 2271, 2276, 2283, 2288, 2295, 2300, 2308, 2312, 2318, 2323, 2327, 2332, 2337, 2340, 2344, 2347, 2350, 2353, 2356, 2358, 2359, 2360, 2361, 2362, 2363, 2363, 2366, 2366, 2367, 2367, 2368, 2369, 2369, 2370, 2371, 2370, 2371} ,
{2132, 2133, 2133, 2132, 2133, 2132, 2133, 2132, 2135, 2133, 2135, 2135, 2136, 2136, 2137, 2136, 2136, 2139, 2139, 2141, 2143, 2144, 2147, 2148, 2152, 2153, 2155, 2158, 2160, 2165, 2165, 2170, 2174, 2178, 2181, 2182, 2181, 2178, 2185, 2185, 2190, 2192, 2196, 2199, 2201, 2204, 2206, 2210, 2216, 2218, 2224, 2227, 2234, 2241, 2247, 2253, 2259, 2265, 2268, 2274, 2279, 2282, 2288, 2293, 2299, 2304, 2309, 2314, 2320, 2323, 2329, 2332, 2337, 2341, 2343, 2346, 2350, 2353, 2355, 2357, 2360, 2361, 2361, 2363, 2363, 2363, 2365, 2366, 2369, 2367, 2368, 2369, 2369, 2370, 2369, 2371, 2370, 2370, 2370} ,
{2161, 2160, 2160, 2160, 2160, 2160, 2161, 2160, 2161, 2160, 2162, 2162, 2163, 2163, 2164, 2163, 2162, 2165, 2167, 2169, 2170, 2170, 2173, 2173, 2177, 2179, 2181, 2185, 2186, 2190, 2191, 2197, 2199, 2202, 2206, 2207, 2205, 2203, 2208, 2210, 2215, 2217, 2220, 2223, 2225, 2226, 2230, 2233, 2237, 2240, 2246, 2249, 2255, 2261, 2266, 2272, 2277, 2284, 2287, 2291, 2295, 2300, 2302, 2307, 2312, 2316, 2321, 2326, 2330, 2332, 2337, 2339, 2343, 2345, 2348, 2352, 2354, 2356, 2358, 2360, 2361, 2362, 2364, 2365, 2365, 2366, 2367, 2367, 2367, 2368, 2369, 2370, 2370, 2369, 2370, 2370, 2371, 2372, 2371} ,
{2186, 2187, 2186, 2186, 2187, 2186, 2187, 2186, 2189, 2187, 2189, 2189, 2189, 2190, 2190, 2190, 2191, 2193, 2192, 2195, 2194, 2197, 2199, 2200, 2203, 2205, 2207, 2211, 2211, 2214, 2216, 2221, 2223, 2226, 2229, 2231, 2229, 2228, 2233, 2234, 2238, 2239, 2243, 2245, 2247, 2249, 2252, 2255, 2258, 2262, 2267, 2269, 2274, 2279, 2284, 2290, 2293, 2299, 2302, 2306, 2308, 2312, 2316, 2320, 2322, 2327, 2331, 2334, 2338, 2341, 2343, 2345, 2349, 2351, 2355, 2356, 2356, 2360, 2361, 2363, 2364, 2365, 2365, 2366, 2368, 2369, 2368, 2369, 2368, 2369, 2369, 2370, 2371, 2371, 2371, 2370, 2371, 2371, 2370} ,
{2212, 2211, 2212, 2211, 2211, 2211, 2213, 2212, 2213, 2212, 2213, 2212, 2214, 2213, 2215, 2184, 2198, 2217, 2218, 2219, 2220, 2221, 2222, 2224, 2227, 2229, 2230, 2233, 2233, 2238, 2240, 2242, 2246, 2248, 2251, 2252, 2250, 2249, 2253, 2255, 2258, 2260, 2264, 2265, 2267, 2269, 2271, 2273, 2278, 2278, 2285, 2287, 2292, 2296, 2300, 2305, 2308, 2313, 2314, 2318, 2320, 2324, 2327, 2330, 2332, 2336, 2338, 2342, 2345, 2346, 2349, 2351, 2353, 2356, 2359, 2360, 2361, 2363, 2364, 2364, 2366, 2366, 2367, 2368, 2368, 2369, 2370, 2369, 2370, 2371, 2371, 2371, 2370, 2371, 2371, 2372, 2371, 2371, 2372} ,
{2235, 2235, 2235, 2235, 2235, 2235, 2236, 2235, 2236, 2235, 2236, 2237, 2236, 2237, 2237, 2238, 2237, 2239, 2241, 2241, 2242, 2243, 2245, 2246, 2249, 2249, 2251, 2254, 2256, 2259, 2259, 2263, 2266, 2267, 2271, 2271, 2271, 2269, 2273, 2273, 2278, 2278, 2281, 2283, 2284, 2286, 2288, 2290, 2293, 2295, 2299, 2302, 2305, 2308, 2312, 2316, 2320, 2323, 2326, 2328, 2330, 2332, 2335, 2337, 2340, 2342, 2346, 2347, 2349, 2352, 2354, 2356, 2357, 2358, 2360, 2361, 2363, 2364, 2365, 2367, 2367, 2369, 2368, 2369, 2369, 2369, 2369, 2369, 2369, 2370, 2371, 2372, 2370, 2371, 2371, 2371, 2370, 2371, 2372} ,
{2256, 2256, 2256, 2255, 2256, 2256, 2256, 2256, 2257, 2257, 2256, 2257, 2258, 2258, 2258, 2260, 2258, 2260, 2262, 2263, 2263, 2264, 2266, 2266, 2268, 2269, 2271, 2274, 2275, 2277, 2278, 2281, 2283, 2286, 2288, 2289, 2288, 2286, 2289, 2290, 2294, 2294, 2297, 2298, 2300, 2301, 2304, 2305, 2309, 2309, 2312, 2315, 2318, 2322, 2325, 2328, 2330, 2333, 2335, 2338, 2339, 2341, 2342, 2344, 2347, 2348, 2351, 2353, 2354, 2356, 2359, 2359, 2361, 2361, 2363, 2365, 2366, 2366, 2367, 2368, 2369, 2369, 2370, 2370, 2371, 2369, 2370, 2370, 2371, 2371, 2372, 2371, 2371, 2373, 2372, 2373, 2373, 2372, 2373} ,
{2276, 2275, 2276, 2276, 2275, 2275, 2276, 2275, 2276, 2276, 2277, 2277, 2277, 2276, 2277, 2276, 2276, 2279, 2278, 2280, 2281, 2282, 2283, 2284, 2286, 2287, 2289, 2290, 2291, 2294, 2294, 2298, 2298, 2301, 2304, 2304, 2302, 2301, 2304, 2305, 2307, 2309, 2310, 2311, 2313, 2314, 2316, 2316, 2319, 2320, 2324, 2325, 2328, 2332, 2333, 2335, 2337, 2340, 2342, 2343, 2345, 2346, 2348, 2349, 2352, 2354, 2354, 2356, 2358, 2359, 2361, 2363, 2362, 2365, 2365, 2366, 2367, 2367, 2368, 2368, 2369, 2369, 2370, 2369, 2370, 2370, 2370, 2370, 2370, 2371, 2371, 2372, 2371, 2371, 2372, 2371, 2372, 2371, 2372} ,
{2292, 2292, 2292, 2291, 2292, 2290, 2291, 2291, 2292, 2292, 2292, 2292, 2294, 2293, 2292, 2293, 2197, 2272, 2228, 2298, 2293, 2298, 2299, 2299, 2302, 2301, 2304, 2305, 2305, 2307, 2308, 2311, 2310, 2314, 2316, 2316, 2315, 2314, 2317, 2317, 2319, 2320, 2322, 2323, 2324, 2324, 2326, 2327, 2330, 2332, 2333, 2334, 2336, 2340, 2341, 2344, 2345, 2347, 2348, 2349, 2350, 2352, 2353, 2354, 2355, 2357, 2359, 2360, 2361, 2363, 2363, 2363, 2364, 2365, 2366, 2366, 2369, 2370, 2369, 2369, 2370, 2371, 2370, 2371, 2371, 2371, 2370, 2371, 2372, 2372, 2372, 2371, 2372, 2372, 2372, 2372, 2372, 2372, 2372} ,
{2306, 2307, 2306, 2306, 2306, 2306, 2307, 2307, 2306, 2306, 2307, 2307, 2308, 2307, 2307, 2307, 2306, 2309, 2309, 2310, 2310, 2311, 2312, 2312, 2313, 2315, 2316, 2317, 2317, 2319, 2320, 2322, 2323, 2324, 2326, 2326, 2326, 2325, 2327, 2327, 2329, 2330, 2331, 2332, 2333, 2335, 2335, 2336, 2337, 2339, 2341, 2341, 2343, 2345, 2347, 2348, 2351, 2351, 2353, 2353, 2355, 2356, 2356, 2358, 2359, 2360, 2361, 2362, 2363, 2364, 2365, 2366, 2367, 2367, 2368, 2369, 2369, 2370, 2369, 2370, 2370, 2371, 2372, 2371, 2372, 2372, 2372, 2372, 2371, 2373, 2373, 2372, 2372, 2373, 2372, 2373, 2373, 2372, 2373} ,
{2318, 2319, 2318, 2318, 2319, 2318, 2319, 2319, 2318, 2318, 2319, 2318, 2319, 2321, 2320, 2319, 2318, 2320, 2320, 2321, 2321, 2322, 2323, 2323, 2325, 2325, 2325, 2327, 2327, 2328, 2329, 2331, 2332, 2333, 2335, 2335, 2334, 2334, 2334, 2336, 2337, 2338, 2339, 2341, 2340, 2342, 2343, 2343, 2344, 2345, 2347, 2347, 2349, 2350, 2353, 2354, 2355, 2356, 2356, 2359, 2359, 2359, 2362, 2362, 2362, 2362, 2365, 2364, 2366, 2367, 2368, 2368, 2368, 2368, 2369, 2370, 2370, 2370, 2371, 2370, 2371, 2371, 2372, 2371, 2372, 2374, 2372, 2371, 2372, 2372, 2373, 2373, 2373, 2372, 2373, 2373, 2372, 2372, 2373} ,
{2328, 2328, 2328, 2329, 2328, 2328, 2328, 2328, 2328, 2328, 2328, 2330, 2328, 2328, 2329, 2329, 2329, 2331, 2330, 2331, 2331, 2331, 2332, 2333, 2334, 2334, 2334, 2336, 2336, 2337, 2337, 2338, 2340, 2340, 2342, 2342, 2341, 2341, 2342, 2342, 2345, 2344, 2345, 2345, 2348, 2348, 2349, 2348, 2349, 2349, 2352, 2353, 2348, 2355, 2356, 2357, 2357, 2359, 2359, 2361, 2361, 2361, 2363, 2363, 2363, 2365, 2366, 2366, 2367, 2367, 2368, 2367, 2369, 2369, 2370, 2369, 2370, 2370, 2371, 2371, 2372, 2372, 2371, 2371, 2372, 2371, 2372, 2372, 2373, 2371, 2373, 2373, 2372, 2372, 2372, 2373, 2373, 2373, 2372} ,
{2337, 2337, 2337, 2336, 2337, 2337, 2337, 2336, 2336, 2337, 2335, 2337, 2336, 2337, 2339, 2337, 2336, 2338, 2339, 2338, 2341, 2340, 2341, 2341, 2340, 2341, 2342, 2342, 2344, 2344, 2344, 2347, 2347, 2346, 2348, 2348, 2347, 2348, 2348, 2349, 2350, 2350, 2351, 2350, 2353, 2351, 2353, 2354, 2354, 2354, 2356, 2356, 2358, 2358, 2359, 2361, 2362, 2363, 2363, 2363, 2363, 2364, 2364, 2366, 2367, 2366, 2367, 2368, 2368, 2370, 2369, 2370, 2369, 2370, 2370, 2371, 2371, 2371, 2371, 2370, 2371, 2371, 2371, 2372, 2372, 2372, 2374, 2372, 2373, 2372, 2372, 2373, 2372, 2373, 2372, 2372, 2373, 2373, 2372} ,
{2344, 2344, 2343, 2344, 2343, 2344, 2343, 2343, 2343, 2344, 2344, 2345, 2344, 2343, 2343, 2344, 2344, 2346, 2346, 2345, 2346, 2346, 2346, 2347, 2347, 2348, 2348, 2349, 2349, 2350, 2350, 2351, 2352, 2354, 2345, 2354, 2353, 2353, 2353, 2354, 2355, 2355, 2355, 2355, 2356, 2357, 2357, 2357, 2358, 2358, 2359, 2360, 2361, 2362, 2362, 2363, 2363, 2364, 2365, 2365, 2365, 2367, 2366, 2366, 2366, 2368, 2368, 2369, 2369, 2369, 2370, 2371, 2370, 2370, 2373, 2371, 2372, 2372, 2372, 2371, 2372, 2373, 2372, 2372, 2372, 2373, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2373, 2371, 2372} ,
{2349, 2349, 2349, 2348, 2348, 2348, 2349, 2349, 2349, 2348, 2349, 2348, 2349, 2348, 2350, 2349, 2350, 2350, 2349, 2351, 2349, 2351, 2351, 2351, 2351, 2352, 2354, 2353, 2353, 2354, 2353, 2355, 2355, 2356, 2357, 2356, 2356, 2355, 2356, 2356, 2357, 2358, 2359, 2359, 2359, 2359, 2360, 2360, 2361, 2361, 2361, 2362, 2363, 2363, 2365, 2364, 2365, 2365, 2366, 2366, 2366, 2368, 2367, 2368, 2368, 2368, 2368, 2368, 2369, 2370, 2370, 2370, 2369, 2370, 2370, 2371, 2370, 2371, 2370, 2371, 2371, 2371, 2372, 2372, 2371, 2371, 2372, 2371, 2372, 2372, 2372, 2372, 2372, 2373, 2372, 2372, 2372, 2372, 2370} ,
{2354, 2353, 2354, 2353, 2354, 2353, 2352, 2352, 2354, 2355, 2353, 2353, 2353, 2354, 2354, 2354, 2355, 2355, 2355, 2354, 2354, 2356, 2356, 2356, 2355, 2356, 2356, 2358, 2357, 2357, 2357, 2357, 2358, 2359, 2359, 2360, 2359, 2359, 2360, 2361, 2361, 2360, 2361, 2362, 2361, 2363, 2362, 2362, 2363, 2363, 2364, 2365, 2365, 2365, 2365, 2366, 2367, 2367, 2368, 2369, 2368, 2369, 2369, 2369, 2370, 2370, 2370, 2370, 2370, 2371, 2370, 2371, 2370, 2370, 2371, 2371, 2372, 2372, 2372, 2372, 2371, 2372, 2372, 2372, 2371, 2373, 2372, 2372, 2372, 2372, 2371, 2372, 2372, 2372, 2372, 2372, 2373, 2373, 2372} ,
{2358, 2357, 2358, 2359, 2358, 2357, 2358, 2359, 2359, 2358, 2359, 2359, 2359, 2358, 2359, 2359, 2358, 2358, 2360, 2360, 2360, 2359, 2360, 2359, 2360, 2360, 2361, 2361, 2362, 2363, 2362, 2362, 2361, 2363, 2363, 2364, 2362, 2362, 2363, 2364, 2363, 2363, 2364, 2364, 2365, 2365, 2365, 2365, 2366, 2365, 2367, 2368, 2367, 2366, 2367, 2368, 2368, 2369, 2370, 2370, 2369, 2369, 2370, 2370, 2370, 2370, 2371, 2372, 2372, 2371, 2372, 2371, 2372, 2372, 2372, 2373, 2373, 2372, 2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373, 2372, 2372, 2373, 2374, 2373, 2373, 2373, 2373, 2373, 2373 },
{2361, 2360, 2362, 2361, 2360, 2361, 2361, 2361, 2362, 2362, 2362, 2362, 2362, 2362, 2362, 2362, 2362, 2363, 2363, 2362, 2363, 2363, 2362, 2362, 2362, 2362, 2362, 2362, 2364, 2364, 2363, 2364, 2364, 2365, 2365, 2364, 2367, 2365, 2365, 2365, 2366, 2366, 2365, 2365, 2366, 2366, 2366, 2366, 2367, 2367, 2367, 2368, 2368, 2368, 2369, 2368, 2368, 2370, 2371, 2370, 2370, 2369, 2369, 2370, 2370, 2370, 2370, 2371, 2371, 2371, 2371, 2371, 2371, 2370, 2372, 2371, 2372, 2372, 2372, 2372, 2373, 2372, 2372, 2372, 2373, 2373, 2373, 2372, 2372, 2373, 2373, 2372, 2372, 2372, 2373, 2372, 2372, 2372, 2373},
{2363, 2363, 2363, 2363, 2363, 2363, 2363, 2363, 2363, 2364, 2364, 2364, 2363, 2363, 2363, 2363, 2363, 2364, 2364, 2363, 2364, 2364, 2363, 2363, 2364, 2364, 2364, 2364, 2364, 2365, 2366, 2366, 2365, 2366, 2366, 2366, 2366, 2365, 2367, 2366, 2367, 2367, 2367, 2366, 2367, 2368, 2369, 2368, 2369, 2368, 2368, 2368, 2368, 2369, 2370, 2370, 2370, 2370, 2369, 2369, 2371, 2373, 2371, 2371, 2372, 2371, 2371, 2373, 2373, 2373, 2373, 2372, 2372, 2372, 2373, 2372, 2372, 2372, 2372, 2371, 2372, 2373, 2373, 2373, 2372, 2373, 2373, 2372, 2375, 2373, 2372, 2374, 2373, 2373, 2373, 2372, 2372, 2372, 2373}}; 

        int freq = 0;
        //int int_value_freq;
        int amp = 0;
        int temp_iter = 0;
        //=====================================================\

        


        public MainWindow()
        {
            InitializeComponent();
            refreshUSBDeviceList();
        }

        private void frmMain_Load(object sender, EventArgs e)
        {
            refreshUSBDeviceList();
            mDevList.Changed += mDevList_Changed;
        }



        private void mDevList_Changed(object sender, DeviceListChangedEventArgs e)
        {
            refreshUSBDeviceList();
        }

        private void btnConnect_Click(object sender, EventArgs e)
        {

            string s;

            byte[] writeBuffer = new byte[64];
            byte[] readBuffer = new byte[64];

            mHidDevice = mHidList.ElementAt(cbxHID.SelectedIndex);

            if (mHidStream == null)
            {
                if (mHidDevice.TryOpen(out mHidStream))
                {
                    if (mHidStream.CanWrite)
                    {
                        s = "*IDN?\n";
                        //arr = 1;
                        //s = "TEMP?";
                        Encoding.Default.GetBytes(s, 0, s.Length, writeBuffer, 1);

                        writeBuffer[0] = 1;

                        mHidStream.Write(writeBuffer);
                    }
                    
                    if (mHidStream.CanRead)
                    {
                        int nBytesRead = mHidStream.Read(readBuffer);
                        gpbName.Header = Encoding.Default.GetString(readBuffer, 1, nBytesRead - 1);
                    }
                    btnConnect.Content = "Disconnect";
                    btnSend.IsEnabled = true;
                    btnTEMP.IsEnabled = true;
                    gpbName.IsEnabled = true;
                    //btn_AMP_start.IsEnabled = false;
                    //lay_amp_res.IsEnabled = false;
                    //btn_CALIB_start.IsEnabled = false;
                }
            }
            else
            {
                mHidStream.Close();
                mHidStream.Dispose();

                mHidStream = null;
                gpbName.IsEnabled = false;
                btnConnect.Content = "Connect";
                btnSend.IsEnabled = false;
                btnTEMP.IsEnabled = false;
                //edtRead.Text = String.Empty;
            }
        }
        void Send()
        {
            string s;

            byte[] writeBuffer = new byte[64];
            byte[] readBuffer = new byte[64];

            if (mHidStream.CanWrite)
            {
                s = edtSend.Text + "\n";
                Encoding.Default.GetBytes(s, 0, s.Length, writeBuffer, 1);
                writeBuffer[0] = 1;
                mHidStream.Write(writeBuffer);
            }



            if (edtSend.Text.EndsWith("?") && mHidStream.CanRead)
            {
                try
                {
                    int nBytesRead = mHidStream.Read(readBuffer);
                    if (arr == 1)
                    {
                        //if (readBuffer[0] == ' ') readBuffer[0] = 0;
                        for (int x = 0; x < 15; x++)
                        {
                            mass[x] = (byte)(readBuffer[x + 2] + 48);
                        }
                        int temp = ((mass[0] - 48) * 1000) + ((mass[1] - 48) * 100) + ((mass[2] - 48) * 10) + ((mass[3] - 48));
                        int volt = ((mass[4] - 48) * 1000) + ((mass[5] - 48) * 100) + ((mass[6] - 48) * 10) + ((mass[7] - 48));
                        edtRead.Text = volt.ToString();
                        /*double v2 = 0;
                        double v = volt * 3.3 / 4096 * 1.0;
                        double t = temp * 3.3 / 4096 * 1.0;
                        double d1 = temp * 3.3 / 4095;
                        double d2 = d1 - 0.52;
                        double d3 = d2 / 0.002;
                        double d4 = d3 - 40;
                        
                        for (int x = 0; x < iteration; x++)
                        {
                            temp_iter += volt;
                            v2 += v;
                        }
                        v2 /= iteration;
                        temp_iter /= iteration;
                        temp_iter = volt;
                        d4 *= 1.2;
                        double form = -(temp_iter - 602) / 30.4;*/
                          
                        //String textt = "Напряжение: " + v2.ToString("0.000") + "В" + "\n"  + "Напряжение: " + temp_iter.ToString() + "Byte";
                        //edtRead.Text = temp.ToString();
                        //value_u = v.ToString("0.000");
                        //amp_VIEW_MK.Text = form.ToString("0.00")+ " dBm";
                        //Fail_record(textt);
                        //edtRead.Text = d4.ToString();

                    }
                    else edtRead.Text = Encoding.Default.GetString(readBuffer, 1, nBytesRead - 1);

                }
                catch (Exception ex)
                {
                    MessageBoxResult result = System.Windows.MessageBox.Show(ex.Message);
                }
                
            }
        }

        void Coificient()
        {

        }

        private void btnSend_Click(object sender, EventArgs e)
        {
            Send();
        }

        private void cbxHID_Click(object sender, SelectionChangedEventArgs e)
        {

            refreshUSBDeviceList();
        }

        private void refreshUSBDeviceList()
        {
            Action act_cbxHIDAdd;
            Action act_cbxHIDIndex;
            //edtSend.Text = "TEMP?";
            mDevList = DeviceList.Local;
            mHidList = mDevList.GetHidDevices(0x2bd1);

            foreach (HidDevice device in mHidList)
            {
                act_cbxHIDAdd = () => cbxHID.Items.Add(device.GetManufacturer() + " " + device.GetProductName() + " sn" + device.GetSerialNumber());

                if (!Dispatcher.CheckAccess()) Dispatcher.Invoke(act_cbxHIDAdd);
                else act_cbxHIDAdd();
            }

            if (cbxHID.Items.Count > 0)
            {
                act_cbxHIDIndex = () => cbxHID.SelectedIndex = 0;

                if (!Dispatcher.CheckAccess()) Dispatcher.Invoke(act_cbxHIDIndex);
                else act_cbxHIDIndex();

                btnConnect.IsEnabled = true;
            }
        }
        async void Button_measuring()
        {
            if (arr == 0)
            {
                //Fail_record("true", true);
                flag_temp = true;

                while (flag_temp == true)
                {
                    //https://ru.stackoverflow.com/questions/615113/Почему-thread-sleep-ведёт-себя-неправильно-Как-мне-сделать-задержку-или-длинные
                    edtSend.Text = "TEMP?";
                    arr = 1;
                    Send();
                    await Task.Delay(TimeSpan.FromMilliseconds(10));

                }

            }
        }
        private async void Button_Click(object sender, RoutedEventArgs e)
        {

            if (arr == 0)
            {
                //Fail_record("true", true);
                flag_temp = true;

                while (flag_temp == true)
                {
                    //https://ru.stackoverflow.com/questions/615113/Почему-thread-sleep-ведёт-себя-неправильно-Как-мне-сделать-задержку-или-длинные
                    edtSend.Text = "TEMP?";
                    arr = 1;
                    Send();
                    await Task.Delay(TimeSpan.FromMilliseconds(10));

                }

            }
            else
            {
                flag_temp = false;
                edtRead.Text = "";
                edtSend.Text = "";
                arr = 0;
                //while (!cancellationToken.IsCancellationRequested)
            }
        }
        
        
        
        private void btnE8257D_Click(object sender, RoutedEventArgs e)
        {
            if (flag_on_off == false)
            {
                btnE8257D.Content = "Разорвать";
                btnE8257DFreq.IsEnabled = true;
                btnE8257DPow.IsEnabled = true;
                grbEnable.IsEnabled = true;
                flag_on_off = true;
                editLay.IsEnabled = true;
                //btn_CALIB_start.IsEnabled = true;
                try
                {
                    address = edtId.Text.ToString();
                    IPEndPoint ipPoint = new IPEndPoint(IPAddress.Parse(address), port);
                    socket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                    // подключаемся к удаленному хосту
                    socket.Connect(ipPoint);
                }
                catch (Exception ex)
                {
                    btnE8257DFreq.IsEnabled = false;
                    btnE8257DPow.IsEnabled = false;
                    MessageBoxResult result = System.Windows.MessageBox.Show(ex.Message);
                }
            }
            else
            {
                btnE8257D.Content = "Коннект";
                btnE8257DFreq.IsEnabled = false;
                btnE8257DPow.IsEnabled = false;
                flag_on_off = false;
                grbEnable.IsEnabled = false;
                editLay.IsEnabled = false;

            }
        }
        private void btnE8257DFreq_Click(object sender, RoutedEventArgs e)
        {
            string freq = cmdE8257DFreq.Text;
            string message = edtE8257DFreq.Text;
            if (freq == "") freq = " GHZ";
            if (message == "") message = "0";
            string s = "FREQ:CW " + message + freq;
            byte[] data = Encoding.ASCII.GetBytes(s + "\n");
            socket.Send(data);
        }
        private void btnE8257DPow_Click(object sender, RoutedEventArgs e)
        {
            string amp = cmdE8257DPow.Text;
            string message = edtE8257DPow.Text;
            if (amp == "") amp = " dBm";
            if (message == "") message = "0";
            string s = "POW:AMPL " + message + amp;
            byte[] data = Encoding.ASCII.GetBytes(s + "\n");
            socket.Send(data);
        }
        private void chbE8257DRFOn_Checked(object sender, RoutedEventArgs e)
        {
            string s = null;
            if (chbE8257DRFOn.IsChecked == true) s = "OUTP ON";
            if (chbE8257DRFOn.IsChecked == false) s = "OUTP OFF";
            byte[] data = Encoding.ASCII.GetBytes(s + "\n");
            socket.Send(data);
        }

        private void chbE8257DRMod_Checked(object sender, RoutedEventArgs e)
        {
            string s = null;
            if (chbE8257DRFOn.IsChecked == true) s = "AM ON";
            if (chbE8257DRFOn.IsChecked == false) s = "AM OFF";
            byte[] data = Encoding.ASCII.GetBytes(s + "\n");
            socket.Send(data);
        }

        private async void time_Start_Click(object sender, RoutedEventArgs e)
        {
            int strOFFSET_int = int.Parse(edtOFFSET_Start.Text);//прибовляю stepFREQ к ней
            int stopOFFSET_int = int.Parse(edtOFFSET_Stop.Text);//Convert.ToInt32(edtOFFSET_Start);//прибовляю stepFREQ к ней
            int start_AMP = int.Parse(txtSTEP_AMP.Text);// Convert.ToInt32(txtSTEP_AMP);//прибовляю stepFREQ к ней;
            int stop_AMP = int.Parse(txtSTEP_AMP_STOP.Text);// Convert.ToInt32(txtSTEP_AMP_STOP);//прибовляю stepFREQ к ней;
            int time_AMP = int.Parse(timeAMP.Text);
            int stepFREQ = int.Parse(txtSTEP.Text);//Convert.ToInt32(txtSTEP);//шаг
            int step_AMP_int = -1*int.Parse(txtSTEP_AMP_STEP.Text); //int.Parse(txtSTEP_AMP.Text);//Convert.ToInt32(txtSTEP_AMP);

            int multiplier_GHZ = 1000;
            int multiplier_MHZ = 1;
            float multiplier_KHZ = 1 / 1000;
            int Quantity;//Количество шагов по частоте
            int Quantity_AMP;//Количество шагов по частоте
            switch (cmbOFFSET_Start.Text)
            {
                case "GHZ":
                    strOFFSET_int *= multiplier_GHZ;
                    break;
                case "MHZ":
                    strOFFSET_int *= multiplier_MHZ;
                    break;
                case "KHZ":
                    strOFFSET_int *= (int)multiplier_KHZ;
                    break;
                case "HZ":
                    strOFFSET_int *= 1;
                    break;
            }
            switch (cmbOFFSET_Stop.Text)
            {
                case "GHZ":
                    stopOFFSET_int *= multiplier_GHZ;
                    break;
                case "MHZ":
                    stopOFFSET_int *= multiplier_MHZ;
                    break;
                case "KHZ":
                    stopOFFSET_int *= (int)multiplier_KHZ;
                    break;
                case "HZ":
                    stopOFFSET_int *= 1;
                    break;
            }
            switch (cmbSTEP.Text)
            {
                case "GHZ":
                    stepFREQ *= multiplier_GHZ;
                    break;
                case "MHZ":
                    stepFREQ *= multiplier_MHZ;
                    break;
                case "KHZ":
                    stepFREQ *= (int)multiplier_KHZ;
                    break;
                case "HZ":
                    stepFREQ *= 1;
                    break;
            }

            Quantity = (int)(stopOFFSET_int - strOFFSET_int) / stepFREQ;
            Quantity_AMP = (int)(stop_AMP - start_AMP) / step_AMP_int;
            int data_AMP_step = start_AMP;

            for (int x = 0; x <= Quantity_AMP; x++)
            {
                byte[] data = new byte[64];
                /*data = Encoding.ASCII.GetBytes("OUTP OFF" + "\n");
                socket.Send(data);*/
                //=====================================================
                string stepAMP = "POW:AMPL " + data_AMP_step.ToString() + " dBm";
                data = Encoding.ASCII.GetBytes(stepAMP + "\n");
                socket.Send(data);
                //=====================================================
                data = Encoding.ASCII.GetBytes("OUTP ON" + "\n");
                socket.Send(data);
                //=====================================================
                amp_VIEW.Text = data_AMP_step.ToString() + " dBm";
                int data_FREQ = strOFFSET_int;

                for (int y = 0; y <= Quantity; y++)
                {
                    
                    string strOFFSET = "FREQ:CW " + data_FREQ.ToString() + " MHZ";//отправляю данную команду
                    data = Encoding.ASCII.GetBytes(strOFFSET + "\n");
                    socket.Send(data);
                    //=====================================================
                    data_FREQ += stepFREQ;
                    await Task.Delay(TimeSpan.FromMilliseconds(time_AMP));
                    freq_VIEW.Text = data_FREQ.ToString() + " MHZ";
                    if (y == Quantity)
                    {
                        
                        strOFFSET = "FREQ:CW " + stopOFFSET_int.ToString() + " MHZ";//отправляю данную команду
                        data = Encoding.ASCII.GetBytes(strOFFSET + "\n");
                        socket.Send(data);
                    }
                    value_frq = data_FREQ.ToString();
                    Fail_record();
                    //=====================================================

                }
                value_amp = data_AMP_step.ToString();
                if (x == Quantity_AMP)
                {
                    stepAMP = "POW:AMPL " + stop_AMP.ToString() + " dBm";
                    data = Encoding.ASCII.GetBytes(stepAMP + "\n");
                    socket.Send(data);
                }

                data_AMP_step += step_AMP_int;
            }
        }

        private void time_Stop_Click(object sender, RoutedEventArgs e)
        {

        }

        
        void Fail_record()
        {/*
            StreamWriter f = new StreamWriter("value.txt", true);
            f.WriteLine(value_frq + "    " + value_amp + "    "  + value_u);
            //f.WriteLine("______________________________________________________________");
            f.Close();*/
            /*StreamWriter value_freq_amp_byte10_;
            StreamWriter value_freq_amp_byte0_;
            StreamWriter value_freq_amp_byte_10_;
            StreamWriter value_freq_amp_byte_20_;
            StreamWriter value_freq_amp_byte_30_;
            StreamWriter value_freq_amp_byte_40_;
            StreamWriter value_freq_amp_byte_50_;
            StreamWriter value_freq_amp_byte_60_;*/
            
        }

        private async void btn_CALIB_start_Click(object sender, RoutedEventArgs e)
        {
            Button_measuring();
            

            //grbEnable.IsEnabled = false;
            //btn_AMP_start.IsEnabled = false;
            //lay_amp_res.IsEnabled = false;

            int strOFFSET_int = 100;//прибовляю stepFREQ к ней
            int stopOFFSET_int = 10000;//Convert.ToInt32(edtOFFSET_Start);//прибовляю stepFREQ к ней
            int start_AMP = 10;// Convert.ToInt32(txtSTEP_AMP);//прибовляю stepFREQ к ней;
            int stop_AMP = -60;// Convert.ToInt32(txtSTEP_AMP_STOP);//прибовляю stepFREQ к ней;
            int time_AMP = 300;
            int stepFREQ = 100;//Convert.ToInt32(txtSTEP);//шаг
            int step_AMP_int = -1; //int.Parse(txtSTEP_AMP.Text);//Convert.ToInt32(txtSTEP_AMP);
            int Quantity;//Количество шагов по частоте
            int Quantity_AMP;//Количество шагов по частоте
            
            Quantity = 99;
            Quantity_AMP = 80;
            int data_AMP_step = start_AMP;

            int x1 = 0;

            for (int x = 0; x < 80; x++)
            {
                byte[] data = new byte[64];
                //=====================================================
                string stepAMP = "POW:AMPL " + data_AMP_step.ToString() + " dBm";
                data = Encoding.ASCII.GetBytes(stepAMP + "\n");
                socket.Send(data);
                //=====================================================
                data = Encoding.ASCII.GetBytes("OUTP ON" + "\n");
                socket.Send(data);
                //=====================================================
                amp_VIEW.Text = data_AMP_step.ToString() + " dBm";
                int data_FREQ = strOFFSET_int;
                value_amp = data_AMP_step.ToString();
                int y1 = 0;
                for (int y = strOFFSET_int; y <= stopOFFSET_int; y += stepFREQ)
                {
                    
                    string strOFFSET = "FREQ:CW " + data_FREQ.ToString() + " MHZ";//отправляю данную команду
                    data = Encoding.ASCII.GetBytes(strOFFSET + "\n");
                    socket.Send(data);
                    await Task.Delay(TimeSpan.FromMilliseconds(time_AMP));
                    //=====================================================
                   
                    freq_VIEW.Text = data_FREQ.ToString() + " MHZ";
                    data_FREQ += stepFREQ;
                    value_freq_amp_byte[x1, y1] = temp_iter;
                    y1++;

                }
                data_AMP_step += step_AMP_int;
                x1++;

            }
            //StreamWriter value8 = new StreamWriter("value8.txt", false);
            //value8.Close();
            string[] buf = new string[9000];
            int[] cpp = new int[Quantity];
            int b = 0;
            
            StreamWriter value8 = new StreamWriter("value8.txt", true);
            for (int x = 0; x< Quantity_AMP; x++)
            {
                string f = "";
                //buf[0] = x.ToString()+". ";
                for (int y = 0; y < (Quantity); y++)
                {
                    int app = value_freq_amp_byte[x, y];
                    buf[b] = app.ToString() + ", ";
                    cpp[y] = value_freq_amp_byte[x, y];
                    f += app.ToString() + ", ";
                    b++;
                }
                value8.WriteLine(f);
                //value8.Close();
                //buf[x, 0] = "}";

                //File.WriteAllText("value8.txt", string.Join(", ", cpp));

            }
            //File.WriteAllLines("value8.txt", buf);
            value8.Close();
            grbEnable.IsEnabled = true;
            //lay_amp_res.IsEnabled = true;
            btn_AMP_start.IsEnabled = true;
            //=====================================================

        }

        
        bool flagg = true;
        private async void edr_Click(object sender, RoutedEventArgs e)
        {
            flagg = true;
            while (flagg == true)
            {
                btn_AMP_start.IsEnabled = false;
                btn_AMP_stop.IsEnabled = true;

                Button_measuring();
                int freq_int;
                if (edr_freq_VIEW.Text != "")
                {
                    freq_int = int.Parse(edr_freq_VIEW.Text);
                }
                else
                {
                    freq_int = 1;
                }

                int koif_freq = (int)(freq_int - 100) / 100;
                int x = 0;
                while (temp_iter > value_freq_amp_byte[x, koif_freq])
                {
                    x++;
                }
                int max = value_freq_amp_byte[x, koif_freq];
                int min = value_freq_amp_byte[x - 1, koif_freq];

                float koif = (max - min);
                float koif2 = (temp_iter - min) / koif;
                /*int sign;
                if (x < 11) sign = 1;
                else sign = -1;*/
                koif2 = (koif2 + (x - 11)) * -1;//sign;
                edr_amp_VIEW.Text = koif2.ToString("0.00");
                await Task.Delay(TimeSpan.FromMilliseconds(250));
            }
            
        }

        private void res_HID_Click(object sender, RoutedEventArgs e)
        {
            refreshUSBDeviceList();
        }

        private void btn_AMP_stop_Click(object sender, RoutedEventArgs e)
        {
            flagg = false;
            btn_AMP_start.IsEnabled = true;
            btn_AMP_stop.IsEnabled = false;
        }
    }
}
